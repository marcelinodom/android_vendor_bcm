#!/system/bin/sh

M2SD_VERSION="4.0.0"
M2SD_PROPERTIES="debug:m2sd.debug:0:boolean rmount:m2sd.rmount.switch:0:boolean noatime:m2sd.noatime.switch:0:boolean dlcache:m2sd.cache.download.switch:0:boolean extfs:m2sd.extfs.value:auto:fstype apps:m2sd.apps.switch:1:boolean data:m2sd.data.switch:0:boolean cmdalvik:m2sd.dalvik.cm.switch:0:boolean dalvik:m2sd.dalvik.switch:0:boolean cache:m2sd.cache.switch:-1:option swap:m2sd.swap.switch:0:boolean readahead:m2sd.readahead.value:512:integer journal:m2sd.journal.switch:-1:option fschk:m2sd.fschk.switch:1:boolean"
M2SD_CONFIGS=/data/property
BB=/system/xbin/busybox.m2sd
TOOLBOX=/system/bin/toolbox
SDEXT_PATH="/sd-ext"
DATA_PATH="/data"
SYSTEM_MOD=""

# =========================================================================================
# SET LOG FUNCTION
# =========================================================================================
doLog() {
	LOG_LEVEL="$1"
	LOG_MSG="$2"

	$TOOLBOX log -p $LOG_LEVEL -t mounts2sd "$LOG_MSG"

	if $BB [ -z "$TMP_LABE" ]; then
		export TMP_LABE="TRUE"

		$BB echo "" > /system/etc/m2sd.log
	fi

	$BB echo "$LOG_LEVEL/$LOG_MSG" >> /system/etc/m2sd.log
}

doProp() {
	PROP_ACTION="$1"
	PROP_NAME="$2"
	PROP_VALUE="$3"

	case "$PROP_ACTION" in
		"remove")
			if $BB [ ! -z "$PROP_NAME" ] && $BB [ -e /props/$PROP_NAME ]; then
				$BB rm -rf /props/$PROP_NAME
			fi
		;;

		"set")
			if $BB [ ! -z "$PROP_NAME" ]; then
				$BB echo "$PROP_VALUE" > /props/$PROP_NAME
			fi
		;;

		"get")
			if $BB [ ! -z "$PROP_NAME" ]; then
				$BB [ -e /props/$PROP_NAME ] && $BB cat /props/$PROP_NAME

			else
				for i in /props/*; do
					$BB echo "[`busybox basename $i`]: [`cat $i`]"
				done
			fi
		;;
	esac
}

doWrite() {
	WR_ACTION="$1"
	WR_STATUS="`$BB cat /proc/mounts | $BB grep " /system " | $BB tr -s ' ' | $BB cut -d ' ' -f4 | $BB cut -d ',' -f1`"

	if $BB [ -z "$SYSTEM_MOD" ]; then
		SYSTEM_MOD="$WR_STATUS"
	fi

	if $BB [ "$WR_ACTION" = "start" ] && $BB [ "$WR_STATUS" != "rw" ]; then
		$BB mount -o remount,rw /system

	elif $BB [ "$WR_ACTION" = "stop" ] && $BB [ "$WR_STATUS" != "ro" ] && $BB [ "$SYSTEM_MOD" != "rw" ]; then
		$BB mount -o remount,ro /system
	fi
}

# This is used as a hack to break out of at any time
for loopwrapper in true; do

	$BB test 2> /dev/null

	# This is a hacked way of checking whether or not the m2sd busybox exists or not.
	# Some toolbox versions are so limited that they don't even support basic echo command, and most are missing things like [ to make proper conditional checks using if and else.
	case "$?" in
		"1") ;;

		*)
			# Maybe we have a basic busybox available
			busybox test 2> /dev/null

			case "$?" in
				"1") 
					doLog w "Missing M2SD Busybox. Using ROM buildin instead."
					BB="busybox"
				;;

				*)
					$TOOLBOX log -p e -t mounts2sd "Missing Busybox!"

					# Break loopwrapper
					break
				;;
			esac
		;;
	esac

	CALL_BASENAME="`$BB basename $0`"
	SCRIPT=`$BB readlink -f $0`

	if $BB [ ! -d $M2SD_CONFIGS ]; then
		doWrite start
		$BB mkdir -p $M2SD_CONFIGS
		$BB chown 1000.1000 $M2SD_CONFIGS
		$BB chmod 0771 $M2SD_CONFIGS
		doWrite stop
	fi

	if $BB [ "$CALL_BASENAME" = "m2sd" ] || ( $BB [ ! -z "$1" ] && $BB [ "`$BB basename $1`" = "m2sd" ] ); then
		if $BB [ "`$BB id | $BB sed -ne "s/^uid=\([0-9]\+\)[^0-9].*$/\1/p"`" != "0" ]; then
			$BB echo "You need to be root to access m2sd configurations. Type 'su' in console to gain superuser privileges!"
		
		else
			$BB [ "$CALL_BASENAME" = "m2sd" ] && INAME="$1" || INAME="$2"
			$BB [ "$CALL_BASENAME" = "m2sd" ] && IVALUE="$2" || IVALUE="$3"

			case "$INAME" in
				""|"help"|"--help"|"-h")
					$BB echo ""
					$BB echo " Usage: m2sd [index]		: Get value from index" 
					$BB echo " Usage: m2sd [index] [value]	: Change current value"
					$BB echo ""
					$BB echo " - cache [disable/enable/auto]	: Enable/disable cache2sd"
 					$BB echo " - debug [disable/enable]	: Enable/disable debugging"
					$BB echo " - apps [disable/enable]	: Enable/disable apps2sd"

					if $BB [ "`doProp get mounts2sd.status`" != "safe-mode" ]; then
						$BB echo " - dalvik [disable/enable]	: Enable/disable dalvik2sd"
						$BB echo " - cmdalvik [disable/enable]	: Enable/disable CyanogenMod dalvik fix (/cache to /data)"
						$BB echo " - data [disable/enable]	: Enable/disable data2sd (/data/data)"
						$BB echo " - dlcache [disable/enable]	: Replace /cache/download/ instead of /cache/"
						$BB echo " - rmount [disable/enable]	: Reversed mount. sd-ext on /data and data on /sd-ext"
					fi

					$BB echo " - swap [disable/enable]	: Enable/disable swap"
					$BB echo " - journal [disable/enable/auto]: Enable/disable ext(3,4) journal on sd-ext"
					$BB echo " - fschk [disable/enable]	: Enable/disable file system check during boot"
					$BB echo " - noatime [disable/enable]	: Mount /data and /sd-ext with noatime"
					$BB echo " - readahead [0-9]		: Set sdcard readahead (In kb)"
					$BB echo " - extfs [auto/<fs-type>]	: Force a specific fs type on /sd-ext mount"
					$BB echo ""
					$BB echo "Info:"
					$BB echo "-----"
					$BB echo " - log				: Get the log from last boot"
					$BB echo " - status			: Get the status"
					$BB echo " - version			: Get current version"
					$BB echo ""
					$BB echo "Actions:"
					$BB echo "--------"
					$BB echo " - fixperm			: Do a one time permissions check and fix them if needed"
					$BB echo ""

					if $BB [ "`doProp get mounts2sd.status`" = "safe-mode" ]; then
						$BB echo "--------------"
						$BB echo "Mounts2SD is currently running in safe-mode and some options is therefore hidden/disabled. In order to use all of the options of the script, your ROM must use the sysinit execute method of handling init.d scripts. Your ROM is currently using the sysinit service method which is highly unstable."
					fi
				;;

				"log")
					if $BB [ -f /system/etc/m2sd.log ] && $BB [ ! -z "`$BB cat /system/etc/m2sd.log`" ]; then
						$BB cat /system/etc/m2sd.log

					else
						$BB echo " - Log file is empty!"
					fi
				;;

				"status") 
					$BB echo ""
					$BB echo "Status:"
					$BB echo "-------"
					$BB echo "Mounts2SD [`doProp get mounts2sd.status`]"
					$BB echo " - Apps [`doProp get mounts2sd.sdext.status.apps`]"
					$BB echo " - Data [`doProp get mounts2sd.sdext.status.data`]"
					$BB echo " - Dalvik [`doProp get mounts2sd.sdext.status.dalvik`]"
					$BB echo " - CmDalvik [`doProp get mounts2sd.cmdalvik.status`]"
					$BB echo " - Cache [`doProp get mounts2sd.cache.status`]"
					$BB echo " - SWAP [`doProp get mounts2sd.swap.status`]"
					$BB echo " - RMount [`doProp get mounts2sd.rmount.status`]"
					$BB echo ""
					$BB echo "Device info:"
					$BB echo "------------"
					$BB echo "SD-EXT device [`doProp get mounts2sd.sdext.device`]"
					$BB echo "Cache device [`doProp get mounts2sd.cache.device`]"
					$BB echo " - Location [`doProp get mounts2sd.cache.path`]"
					$BB echo "Swap device [`doProp get mounts2sd.swap.device`]"
					$BB echo ""
				;;

				"version") 
					$BB echo "$M2SD_VERSION"
				;;

				"fixperm") 
					doWrite start
					$BB echo "1" > $M2SD_CONFIGS/m2sd.fix.permissions.boot
					doWrite stop
					$BB echo "A permissions check will be performed during the next boot!"
				;;

				*)
					CMD_LINE="`$BB echo $M2SD_PROPERTIES | $BB sed -n "s/.*\($INAME:[^:]*:[^:]*:[a-z]*\).*/\1/p"`"

					if $BB [ ! -z "$CMD_LINE" ]; then
						CMD_FILE="`$BB echo $CMD_LINE | $BB cut -d ":" -f 2`"
						CMD_VALUE="`$BB echo $CMD_LINE | $BB cut -d ":" -f 3`"
						CMD_TYPE="`$BB echo $CMD_LINE | $BB cut -d ":" -f 4`"

						if $BB [ ! -z "$IVALUE" ]; then
							IVALUENAME="$IVALUE"

							case "$CMD_TYPE" in
								"boolean") 
									if $BB [ "$IVALUE" = "enable" ] || $BB [ "$IVALUE" = "disable" ]; then
										CHK_EXCEPT="true"
										$BB [ "$IVALUE" = "enable" ] && IVALUE="1" || IVALUE="0"

									else
										$BB echo "Invalid value. The command '$INAME' only excepts the values 'enable' or 'disable'!"
									fi
								;;

								"option") 
									if $BB [ "$IVALUE" = "enable" ] || $BB [ "$IVALUE" = "disable" ] || $BB [ "$IVALUE" = "auto" ]; then
										CHK_EXCEPT="true"

										if $BB [ "$IVALUE" = "auto" ]; then
											IVALUE="-1"
										else
											$BB [ "$IVALUE" = "enable" ] && IVALUE="1" || IVALUE="0"
										fi

									else
										$BB echo "Invalid value. The command '$INAME' only excepts the values 'enable', 'disable' or 'auto'!"
									fi
								;;

								"integer") 
									if $BB [ -z "`$BB echo $IVALUE | $BB sed 's/[0-9]//g'`" ]; then
										CHK_EXCEPT="true"

									else
										$BB echo "Invalid value. The command '$INAME' only excepts numeric values!"
									fi
								;;

								"fstype") 
									if $BB [ "$IVALUE" = "auto" ] || $BB [ ! -z "`$BB cat /proc/filesystems | $BB grep $IVALUE | $BB grep -v 'nodev'`" ]; then
										CHK_EXCEPT="true"

									else
										$BB echo "Invalid or unsupported file system type."
										$BB echo "Valid/supported types are either 'auto' or one of the fallowing..."
										$BB echo "`$BB cat /proc/filesystems | $BB grep -v 'nodev'`"
									fi
								;;
							esac

							if $BB [ "$CHK_EXCEPT" = "true" ]; then
								doWrite start
								$BB echo "$IVALUE" > $M2SD_CONFIGS/$CMD_FILE
								doWrite stop
								$BB echo " - Changed M2SD $INAME to $IVALUENAME. Reboot to make changes take affect!"
							fi

						else
							if $BB [ ! -f $M2SD_CONFIGS/$CMD_FILE ]; then
								doWrite start
								$BB echo "$CMD_VALUE" > $M2SD_CONFIGS/$CMD_FILE
								$BB chown 1000.1000 $M2SD_CONFIGS/$CMD_FILE
								$BB chmod 0600 $M2SD_CONFIGS/$CMD_FILE
								doWrite stop
							fi

							if $BB [ "$CMD_TYPE" != "boolean" ] && $BB [ "$CMD_TYPE" != "option" ]; then
								$BB echo "`$BB cat $M2SD_CONFIGS/$CMD_FILE`"

							else
								IVALUE="`$BB cat $M2SD_CONFIGS/$CMD_FILE`"

								if $BB [ "$CMD_TYPE" = "option" ] && $BB [ "$IVALUE" = "-1" ]; then
									echo "auto"

								else
									$BB [ "$IVALUE" = "1" ] && echo "enable" || echo "disable"
								fi
							fi
						fi

					else
						$BB echo "Invalid command. Type 'm2sd help' to see all available options!"
					fi
				;;
			esac
		fi

	# =========================================================================================
	# INITIATION PART
	# =========================================================================================
	else
		# Remount partitions with write permissions
		$BB mount -o remount,rw /
		$BB mount -o remount,rw /system

		$BB chown 1000.1000 $M2SD_CONFIGS
		$BB chmod 0771 $M2SD_CONFIGS
		$BB chown 1000.1000 $M2SD_CONFIGS/m2sd.*
		$BB chmod 0700 $M2SD_CONFIGS/m2sd.*

		if $BB [ -e $M2SD_CONFIGS/m2sd.switch ] && $BB [ "`$BB cat $M2SD_CONFIGS/m2sd.switch`" = "0" ]; then
			doLog v "M2SD has been disabled!"

			$BB mount -o remount,ro /
			$BB mount -o remount,ro /system

			break
		fi

		if $BB [ -e /sys/class/leds/green/brightness ]; then
			$BB echo 1 > /sys/class/leds/green/brightness

		elif $BB [ -e /sys/class/leds/button-backlight/brightness ]; then
			$BB echo 255 > /sys/class/leds/button-backlight/brightness
		fi

		# Activate debug if selected
		if $BB [ -e $M2SD_CONFIGS/m2sd.debug ] && $BB [ "`$BB cat $M2SD_CONFIGS/m2sd.debug`" = "1" ]; then
			logcat > /system/etc/m2sd.debug &
			LOGCAT_PID="$!"
		fi

		for i in $SDEXT_PATH /props; do
			if $BB [ ! -d $i ]; then
				$BB mkdir $i
			fi
		done

		doLog v "Initiating Mounts2SD (v:$M2SD_VERSION) [`$TOOLBOX date`]"
		doLog v "Checking configurations..."

		# Create the default settings if they do not exist 
		for i in $M2SD_PROPERTIES; do
			I_INDEX="`$BB echo $i | $BB cut -d ":" -f 2`"

			if $BB [ ! -e $M2SD_CONFIGS/$I_INDEX ] || $BB [ -z "`$BB cat $M2SD_CONFIGS/$I_INDEX`" ]; then
				$BB echo "`$BB echo $i | $BB cut -d ":" -f 3`" > $M2SD_CONFIGS/$I_INDEX
				$BB chown 1000.1000 $M2SD_CONFIGS/$I_INDEX
				$BB chmod 0700 $M2SD_CONFIGS/$I_INDEX
			fi
		done

		# Get all settings
		if $BB [ -z "`$BB cat /init.rc | $BB grep exec | $BB grep sysinit`" ] && ( $BB [ ! -e /system/etc/init.local.rc ] || $BB [ -z "`$BB cat /system/etc/init.local.rc | $BB grep exec | $BB grep sysinit`" ] ); then
			doLog w "SYSINIT MISSING: This script works best using sysinit as an executable rather than an service! Switching to safe mode..."

			# Because running sysinit as an service allows the rest of the boot process to run at the same time,
			# moving things like data and dalvik cache will create problems. The system will keep trying to rebuild these as they are being moved.
			# Also CM has added system dex's to be placed in /cache/dalvik-cache rather than /data/dalvik-cache, so moving /cache to /data or /sd-ext
			# will also create dalvik problems. Instead we turn off data, dalvik and only move /cache/download.

			PROP_DLCACHE="1"
			PROP_DALVIK="0"
			PROP_CMDALVIK="0"
			PROP_DATA="0"
			PROP_RMOUNT="0"
			M2SD_STATUS="safe-mode"
		else
			PROP_DLCACHE="`$BB cat $M2SD_CONFIGS/m2sd.cache.download.switch`"
			PROP_DALVIK="`$BB cat $M2SD_CONFIGS/m2sd.dalvik.switch`" 
			PROP_CMDALVIK="`$BB cat $M2SD_CONFIGS/m2sd.dalvik.cm.switch`"
			PROP_DATA="`$BB cat $M2SD_CONFIGS/m2sd.data.switch`"
			PROP_RMOUNT="`$BB cat $M2SD_CONFIGS/m2sd.rmount.switch`"
			M2SD_STATUS="loaded"
		fi

		PROP_CACHE="`$BB cat $M2SD_CONFIGS/m2sd.cache.switch`"
		PROP_EXTFS="`$BB cat $M2SD_CONFIGS/m2sd.extfs.value`" 
		PROP_APPS="`$BB cat $M2SD_CONFIGS/m2sd.apps.switch`"
		PROP_SWAP="`$BB cat $M2SD_CONFIGS/m2sd.swap.switch`" 
		PROP_READAHEAD="`$BB cat $M2SD_CONFIGS/m2sd.readahead.value`"
		PROP_JOURNAL="`$BB cat $M2SD_CONFIGS/m2sd.journal.switch`" 
		PROP_FSCHK="`$BB cat $M2SD_CONFIGS/m2sd.fschk.switch`"
		PROP_NOATIME="`$BB cat $M2SD_CONFIGS/m2sd.noatime.switch`"

		DEV_SYSTEM=`$BB cat /proc/mounts | $BB grep "/dev/" | $BB grep " /system " | $BB cut -d " " -f 1`
		DEV_DATA=`$BB cat /proc/mounts | $BB grep "/dev/" | $BB grep " /data " | $BB cut -d " " -f 1`

		# Configuring data and system partition
		y=0
		for i in $DEV_SYSTEM $DEV_DATA; do
			if $BB [ -e "$i" ]; then
				MTD_MM="`$BB ls -l $i | $BB tr -s " " | sed -ne "s/^.*[ ]\([0-9]\+\),[ ]\([0-9]\+\)[ ].*$/\1:\2/p"`"

				if $BB [ -e /sys/devices/virtual/bdi/$MTD_MM/read_ahead_kb ]; then
					$BB [ "$y" = "0" ] && doLog v "Optimizing /system readahead..." || doLog v "Optimizing /data readahead..."
					$BB echo 4 > /sys/devices/virtual/bdi/$MTD_MM/read_ahead_kb
				fi
			fi

			if $BB [ "$y" = "0" ]; then
				doLog v "Disabling /system atime & diratime..."
				$BB mount -o remount,noatime,nodiratime,barrier=0,nobh /system

			elif $BB [ "$PROP_NOATIME" = "1" ]; then
				doLog v "Disabling /data atime & diratime..."
				$BB mount -o remount,noatime,nodiratime /data
			fi

			y=$(($y + 1))
		done

		doLog v "Waiting for sdcard to initiate..."

		# Locate the sdcard along with it's partitions
		for MMC_TRIES in `seq 1 8`; do
			for MMC_NUM in `seq 0 9`; do
				if $BB [ -e /sys/block/mmcblk$MMC_NUM/device/type ] && $BB [ "`$BB cat /sys/block/mmcblk$MMC_NUM/device/type`" = "SD" ]; then
					doLog v "sdcard found at /sys/block/mmcblk$MMC_NUM..."

					MMC_DEVICE=/dev/block/mmcblk${MMC_NUM}
					MMC_PARTITIONS="`$BB fdisk -l $MMC_DEVICE | $BB awk '/^\// {print $1}'`"
					MMC_MM="`$BB ls -l $MMC_DEVICE | $BB tr -s " " | $BB sed -ne "s/^.*[ ]\([0-9]\+\),[ ]\([0-9]\+\)[ ].*$/\1:\2/p"`"

					if $BB [ -e /sys/devices/virtual/bdi/$MMC_MM/read_ahead_kb ]; then
						doLog v "Setting sdcard readahead to ${PROP_READAHEAD}kb..."
						$BB echo $PROP_READAHEAD > /sys/devices/virtual/bdi/$MMC_MM/read_ahead_kb
					fi

					for i in $MMC_PARTITIONS; do
						if $BB [ ! -z "`$BB blkid | $BB grep $i | $BB grep " TYPE="`" ]; then
							FS_TYPE=`$BB blkid $i | $BB sed 's/.*TYPE=\"\([^\"]*\)\".*/\1/g'`

							case "$FS_TYPE" in 
								"swap")
									$BB [ -z "$MMC_SWAP" ] && MMC_SWAP="$i"
								;;

								*)
									if $BB [ -z "$MMC_SDEXT" ] && $BB [ "$FS_TYPE" != "vfat" ] && $BB [ ! -z "`$BB cat /proc/filesystems | $BB grep $FS_TYPE | $BB grep -v 'nodev'`" ]; then
										MMC_SDEXT="$i"
										$BB [ "$PROP_EXTFS" = "auto" ] && MMC_SDEXT_FS="$FS_TYPE" || MMC_SDEXT_FS="$PROP_EXTFS"

									elif $BB [ -z "$MMC_SDEXT" ] && $BB [ "$FS_TYPE" != "vfat" ]; then
										doLog w "The device $i does not contain a supported sd-ext filesystem!"
									fi
								;;
							esac

						else
							FS_NUMBER="`$BB fdisk -l $MMC_DEVICE | $BB grep $i | $BB tr -s " " | $BB rev | $BB cut -d " " -f 2 | $BB rev`"

							case "$FS_NUMBER" in 
								"82")
									$BB [ -z "$MMC_SWAP" ] && MMC_SWAP="$i"
								;;

								"83")
									if $BB [ -z "$MMC_SDEXT" ]; then
										MMC_SDEXT="$i"
										MMC_SDEXT_FS="$PROP_EXTFS"
									fi
								;;
							esac
						fi
					done

					break 2
				fi
			done

			if $BB [ $MMC_TRIES -eq 8 ]; then
				doLog e "Timedout waiting for sdcard to initiate!"; break

			else
				sleep 1
			fi
		done

		# Activate SWAP if we have any and if it is set to be activated
		if $BB [ ! -z "$MMC_SWAP" ]; then
			doProp set mounts2sd.swap.device "$MMC_SWAP"

			if $BB [ "$PROP_SWAP" = "1" ]; then
				$BB swapon $MMC_SWAP

				if $BB [ "$?" = "0" ]; then
					doLog v "Activating SWAP partition..."
					doProp set mounts2sd.swap.status "loaded"

				else
					doLog w "Could not activate SWAP. Check kernel support!"
				fi
			fi

		elif $BB [ "$PROP_SWAP" = "1" ]; then
			doLog v "Did not find any SWAP partition. Skipping..."
		fi

		# Activate a2sd that will move content from data to sd-ext
		if $BB [ ! -z "$MMC_SDEXT" ]; then
			doProp set mounts2sd.sdext.device "$MMC_SDEXT"

			MMC_DEVNUM="`$BB ls -l $MMC_SDEXT | $BB tr -s " " | sed -ne "s/^.*[ ]\([0-9]\+\),[ ]\([0-9]\+\)[ ].*$/\1:\2/p"`"
			MMC_DEVNAME="`basename $MMC_SDEXT`"

			if $BB [ ! -z "`$BB cat /proc/mounts | $BB grep $MMC_DEVNAME`" ] || $BB [ ! -z "`$BB cat /proc/mounts | $BB grep $MMC_DEVNUM`" ]; then
				doLog w "Another A2SD script was detected. Will attempt to disable it..."

				for i in /system/etc/init.d/*; do
					if $BB [ "`$BB basename $i`" != "`$BB basename $SCRIPT`" ] && ( $BB [ ! -z "`$BB cat $i | $BB grep /sd-ext`" ] || $BB [ ! -z "`$BB cat $i | $BB grep /sdext`" ] ); then
						doLog v "Disabling the script $i..."
						$BB chmod 0666 $i
					fi
				done

				doLog v "Unmounting the sd-ext partition in order to continue..."
				$BB umount $MMC_SDEXT 2> /dev/null
			fi

			if $BB [ ! -z "`$BB cat /proc/mounts | $BB grep $MMC_DEVNAME`" ] || $BB [ ! -z "`$BB cat /proc/mounts | $BB grep $MMC_DEVNUM`" ]; then
				doLog e "Unable to unmount the sd-ext partition. Canceling the sd-ext process!"

			else

				if $BB [ "$MMC_SDEXT_FS" != "auto" ] && $BB [ -z "`$BB cat /proc/filesystems | $BB grep $MMC_SDEXT_FS | $BB grep -v 'nodev'`" ]; then
					doLog w "The defined force sd-ext filesystem type $MMC_SDEXT_FS is not supported. Switching to auto detect!"
					MMC_SDEXT_FS="auto"
				fi

				if $BB [ "$PROP_FSCHK" = "1" ]; then
					$BB [ ! -z "`$BB which e2fsck`" ] && CMD_FSCK="`$BB which e2fsck`" || CMD_FSCK="$BB e2fsck"

					doLog v "Running e2fsck on sd-ext..."
					$CMD_FSCK -y -D $MMC_SDEXT
		
					E2STATUS=$?

					if $BB [ $E2STATUS -gt 0 ] && $BB [ $E2STATUS -lt 4 ]; then
						doLog e "Error detected while checking sd-ext. Auto correction was performed!"

					elif $BB [ $E2STATUS -gt 0 ]; then
						doLog e "Error detected while checking sd-ext. Everything was left uncorrected!"
					fi
				fi

				if $BB [ "$PROP_JOURNAL" != "-1" ]; then
					if $BB [ "$MMC_SDEXT_FS" = "ext4" ]; then
						$BB [ ! -z "`$BB which tune2fs`" ] && CMD_TUNE2FS="`$BB which tune2fs`" || CMD_TUNE2FS="$BB tune2fs"

						if $BB [ "$PROP_JOURNAL" = "0" ]; then
							doLog v "Disabling journal on sd-ext..."
							$CMD_TUNE2FS -O ^has_journal $MMC_SDEXT

						else 	
							doLog v "Enabling journal on sd-ext..."
							$CMD_TUNE2FS -O has_journal $MMC_SDEXT
						fi

					elif $BB [ "$MMC_SDEXT_FS" = "ext3" ]; then
						doLog v "Disabling journal on sd-ext..."
						$BB [ -z "$OPTIONS" ] && OPTIONS="noload" || OPTIONS="$OPTIONS,noload"
					fi
				fi

				if $BB [ "$PROP_NOATIME" = "1" ]; then
					doLog v "Disabling sd-ext atime & diratime..."
					$BB [ -z "$OPTIONS" ] && OPTIONS="noatime,nodiratime" || OPTIONS="$OPTIONS,noatime,nodiratime"
				fi

				if $BB [ "$PROP_RMOUNT" = "1" ]; then
					doLog v "Moving internal nand mount point from /data to $SDEXT_PATH..."
					$BB mount --move /data $SDEXT_PATH

					if $BB [ ! -z "`$BB cat /proc/mounts | $BB grep " $SDEXT_PATH "`" ]; then
						DATA_PATH="$SDEXT_PATH"
						SDEXT_PATH="/data"
						doProp set mounts2sd.rmount.status "loaded"

					else
						doLog e "It was not possible to move the internal nand data mount point to $SDEXT_PATH!"
					fi
				fi

				if $BB [ "$PROP_RMOUNT" != "1" ] || $BB [ "`doProp get mounts2sd.rmount.status`" = "loaded" ]; then
					$BB [ ! -z "$OPTIONS" ] && $BB mount -o $OPTIONS -t $PROP_EXTFS $MMC_SDEXT $SDEXT_PATH || $BB mount -t $PROP_EXTFS $MMC_SDEXT $SDEXT_PATH

					if $BB [ -z "`$BB cat /proc/mounts | $BB grep -w $MMC_SDEXT`" ] && $BB [ "$PROP_EXTFS" != "auto" ]; then
						doLog w "Could not mount sd-ext as $PROP_EXTFS. Trying again with auto detection and no additional options!"
						$BB [ ! -z "$OPTIONS" ] && $BB mount -t auto $MMC_SDEXT $SDEXT_PATH
					fi

					if $BB [ ! -z "`$BB cat /proc/mounts | $BB grep -w $MMC_SDEXT`" ]; then
						$BB [ "$PROP_EXTFS" = "auto" ] && doLog v "The sd-ext partition was mounted successfully at $SDEXT_PATH using auto detection of the file system type!" || doLog v "The sd-ext partition was mounted successfully at $SDEXT_PATH forced as $PROP_EXTFS!"
			
						$BB chown 1000.1000 $SDEXT_PATH
						$BB chmod 771 $SDEXT_PATH

						DO_REVERT="local misc system tombstones"
						DO_MOVE=""

						# Make sure that property always stays on the internal nand
						$BB [ "$PROP_RMOUNT" = "1" ] && DO_MOVE="$DO_MOVE property" || DO_REVERT="$DO_REVERT property"

						$BB [ "$PROP_DALVIK" = "1" ] && DO_MOVE="$DO_MOVE dalvik-cache" || DO_REVERT="$DO_REVERT dalvik-cache"
						$BB [ "$PROP_DATA" = "1" ] && DO_MOVE="$DO_MOVE data" || DO_REVERT="$DO_REVERT data"
						$BB [ "$PROP_APPS" = "1" ] && DO_MOVE="$DO_MOVE app app-private app-system" || DO_REVERT="$DO_REVERT app app-private app-system"

						# Revert content from sd-ext
						for x in $DO_REVERT; do
							if $BB [ ! -d /data/$x ] || $BB [ -L /data/$x ]; then
								$BB [ -L /data/$x ] && $BB rm -rf /data/$x

								$BB mkdir /data/$x
								$BB chown 1000.1000 /data/$x
								$BB chmod 771 /data/$x
							fi

							if $BB [ -d /sd-ext/$x ] && $BB [ ! -L /sd-ext/$x ] && $BB [ ! -z "`$BB ls -v /sd-ext/$x`" ] && $BB [ ! -z "`$BB find /sd-ext/$x -type f`" ]; then
								doLog v "Reverting /sd-ext/$x back to /data/$x..."

								if $BB [ "$x" != "dalvik-cache" ]; then
									for tmp in /sd-ext/$x/*; do
										y="`$BB basename $tmp`"

										if $BB [ -e /data/$x/$y ]; then
											$BB rm -rf /data/$x/$y
										fi

										$BB mv -f /sd-ext/$x/$y /data/$x/
									done

									if $BB [ ! -z "`$BB ls -v /sd-ext/$x`" ]; then
										doLog e "Not all from /sd-ext/$x could be moved to /data/$x. Check available disk space!"

									else
										$BB rmdir /sd-ext/$x
									fi

								else
									$BB rm -rf /sd-ext/$x
								fi

							elif $BB [ -e /sd-ext/$x ]; then
								$BB [ -d /sd-ext/$x ] && $BB [ ! -L /sd-ext/$x ] && DIRS="`$BB find /sd-ext/$x -type d`"

								# Handle cases where init.rc creates muti-level folder structure but all are empty
								if $BB [ ! -z "$DIRS" ]; then
									for n in $DIRS; do
										c="`$BB echo $n | $BB sed 's/^\/sd\-ext\//\/data\//'`"

										if $BB [ ! -d $c ]; then
											$BB mv -f $n $c
										fi
									done
								fi

								$BB rm -rf /sd-ext/$x
							fi
						done

						# Move content to sd-ext
						for x in $DO_MOVE; do
							if $BB [ ! -d /sd-ext/$x ] || $BB [ -L /sd-ext/$x ]; then
								$BB [ -L /sd-ext/$x ] && $BB rm -rf /sd-ext/$x

								$BB mkdir /sd-ext/$x
								$BB chown 1000.1000 /sd-ext/$x
								$BB chmod 771 /sd-ext/$x
							fi

							if $BB [ -d /data/$x ] && $BB [ ! -L /data/$x ] && $BB [ ! -z "`$BB ls -v /data/$x`" ] && $BB [ ! -z "`$BB find /data/$x -type f`" ]; then
								doLog v "Moving content from /data/$x to /sd-ext/$x..."

								if $BB [ "$x" != "dalvik-cache" ]; then
									for tmp in /data/$x/*; do
										y="`$BB basename $tmp`"

										if $BB [ -e /sd-ext/$x/$y ]; then
											$BB rm -rf /sd-ext/$x/$y
										fi

										$BB mv -f /data/$x/$y /sd-ext/$x/
									done

									if $BB [ ! -z "`$BB ls -v /data/$x`" ]; then
										doLog e "Not all from /data/$x could be moved to /sd-ext/$x. Check available disk space!"
									fi

								else
									$BB rm -rf /data/$x
								fi

							elif $BB [ ! -d /data/$x ] || $BB [ -L /data/$x ]; then
								$BB [ -L /data/$x ] && $BB rm -rf /data/$x

								$BB mkdir /data/$x
								$BB chown 1000.1000 /data/$x
								$BB chmod 771 /data/$x

							else
								DIRS="`$BB find /data/$x -type d`"

								# Handle cases where init.rc creates muti-level folder structure but all are empty
								if $BB [ ! -z "$DIRS" ]; then
									for n in $DIRS; do
										c="`$BB echo $n | $BB sed 's/^\/data\//\/sd\-ext\//'`"

										if $BB [ ! -d $c ]; then
											$BB mv -f $n $c
										fi
									done

									$BB rm -rf /data/$x/*
								fi
							fi

							doLog v "Creating link between /data/$x and /sd-ext/$x..."

							$BB mount --bind /sd-ext/$x /data/$x

							if $BB [ ! -z "`$BB cat /proc/mounts | $BB grep " /data/$x "`" ]; then
								$BB [ "$x" = "app" ] && doProp set mounts2sd.sdext.status.apps "loaded"
								$BB [ "$x" = "data" ] && doProp set mounts2sd.sdext.status.data "loaded"
								$BB [ "$x" = "dalvik-cache" ] && doProp set mounts2sd.sdext.status.dalvik "loaded"

							else
								doLog e "Error while linking /data/$x to /sd-ext/$x!"
							fi
						done

						# Make sure that the directory tree in /data is complete
						# This is needed because of r-mount 
						## while read x; do
						## 	INP_FOLDER="`$BB echo $x | $BB cut -d ' ' -f 2`"
						## 	EXT_FOLDER="`$BB echo $INP_FOLDER | $BB sed 's/^\/data/\/sd\-ext/'`"
						## 	INP_PERMISSIONS="`$BB echo $x | $BB cut -d ' ' -f 3`"
						## 	INP_OWNER="`$BB echo $x | $BB cut -d ' ' -f 4`.`$BB echo $x | $BB cut -d ' ' -f 5`"
						## 
						## 	if $BB [ ! -d $INP_FOLDER ]; then
						## 		$BB mkdir $INP_FOLDER
						## 		$TOOLBOX chown $INP_OWNER
						## 		$TOOLBOX chmod $INP_PERMISSIONS
						## 
						## 		# Remove un-used left overs from switching between r-mount and regular mount
						## 		if $BB [ -e $EXT_FOLDER ]; then
						## 			$BB $EXT_FOLDER
						## 		fi
						## 	fi
						## 
						## done <"`$BB cat /init.rc | $BB grep mkdir | $BB grep data | $BB tr -s ' '`"

					else
						doLog e "Error while mounting the sd-ext partition!"

						if $BB [ "`doProp get mounts2sd.rmount.status`" = "loaded" ]; then
							SDEXT_PATH="$DATA_PATH"
							DATA_PATH="/data"

							doProp remove mounts2sd.rmount.status
							doLog v "Moving internal nand mount point back to $DATA_PATH!"
							$BB mount --move $SDEXT_PATH /data 
						fi
					fi
				fi
			fi

		elif $BB [ ! -z "$MMC_DEVICE" ]; then
			doLog w "Could not find any sd-ext partitions on the sdcard!"
		fi

		# Handle system app linking
		for tmp in /system/app/*; do
			if $BB [ -L $tmp ] && $BB [ ! -e "`$BB readlink $tmp`" ]; then
				$BB rm -rf $tmp
			fi
		done

		if $BB [ -d /data/app-system ] && $BB [ ! -z "`$BB ls -v /data/app-system`" ]; then
			doLog v "Linking system apps from /data/app-system to /system/app..."

			for x in /data/app-system/*; do
				y="`$BB basename $x`"

				if $BB [ ! -e /system/app/$y ] || $BB [ ! -L /system/app/$y ]; then
					$BB [ -e /system/app/$y ] && $BB rm -rf /system/app/$y
					$BB ln -s $x /system/app/
				fi
			done
		fi

		if $BB [ ! -f $M2SD_CONFIGS/m2sd.fix.permissions.boot ] || $BB [ "`$BB cat $M2SD_CONFIGS/m2sd.fix.permissions.boot`" = "1" ]; then
			doLog v "Performing a one time permissions check..."
			$BB echo "0" > $M2SD_CONFIGS/m2sd.fix.permissions.boot
			fix_permissions -l -r
		fi

		# Handle /cache
		if $BB [ "$PROP_CACHE" = "1" ] || ( $BB [ "$PROP_CACHE" = "-1" ] && $BB [ "`$BB df -m /cache | $BB tail -n1 | $BB tr -s ' ' | $BB cut -d ' ' -f2`" -lt 40 ] ); then
			doProp set mounts2sd.cache.device "tmpfs"

			$BB [ "$PROP_DLCACHE" = "1" ] && CACHE_LOCATION="/cache/download" || CACHE_LOCATION="/cache"

			if $BB [ ! -z "`$BB cat /proc/mounts | $BB grep " $CACHE_LOCATION "`" ]; then
				doLog v "Umounting pre-mounted $CACHE_LOCATION..."
				$BB umount /cache
			fi

			if $BB [ ! -d $CACHE_LOCATION ] || $BB [ -L $CACHE_LOCATION ]; then
				$BB [ -L $CACHE_LOCATION ] && $BB rm -rf $CACHE_LOCATION

				$BB mkdir -p $CACHE_LOCATION
			fi

			doLog v "Mounting $CACHE_LOCATION at tmpfs..."
			$BB mount -t tmpfs -o size=128M,nr_inodes=42k,mode=0771 tmpfs $CACHE_LOCATION
			$BB chown -R 1000.2001 $CACHE_LOCATION
			$BB chmod -R 771 $CACHE_LOCATION

			if $BB [ ! -z "`$BB cat /proc/mounts | $BB grep " $CACHE_LOCATION "`" ]; then
				if $BB [ ! -d /cache/download ]; then
					$BB mkdir /cache/download
					$BB chown 1000.2001 /cache/download
					$BB chmod 771 /cache/download
				fi

				doProp set mounts2sd.cache.status "loaded"
				doProp set mounts2sd.cache.path "$CACHE_LOCATION"

			else
				doLog e "Error while mounting $CACHE_LOCATION at tmpfs!"
			fi
		fi

		if $BB [ "$PROP_CACHE" = "1" ] || ( $BB [ "$PROP_CACHE" = "-1" ] && $BB [ "`$BB df -m /data | $BB tail -n1 | $BB tr -s ' ' | $BB cut -d ' ' -f4`" -lt 40 ] ); then
			for i in /cache/data-tmp /data/local/tmp; do
				if $BB [ ! -d $i ]; then
					$BB mkdir $i
					$BB chown 2000.2000 $i
					$BB chmod 771 $i
				fi
			done

			doLog v "Creating link between /cache/data-tmp and /data/local/tmp..."
			$BB mount --bind /cache/data-tmp /data/local/tmp

			if $BB [ -z "`$BB cat /proc/mounts | $BB grep " /data/local/tmp "`" ]; then
				doLog e "Error while linking /data/local/tmp to /cache/data-tmp!"
			fi
		fi

		if $BB [ "$PROP_CMDALVIK" = "1" ]; then
			if $BB [ ! -d /cache/dalvik-cache ]; then
				$BB mkdir /cache/dalvik-cache

			else
				if $BB [ ! -z "`$BB ls -v /cache/dalvik-cache`" ]; then
					# If /cache/dalvik-cache has been used, /data/dalvik-cache is outdated.
					# We remove any old files from /data/dalvik-cache to avoid problems.
					for x in /cache/dalvik-cache/*; do
						y="`$BB basename $x`"

						if $BB [ -e /data/dalvik-cache/$y ]; then
							$BB rm -rf /data/dalvik-cache/$y
						fi
					done

					$BB rm -rf /cache/dalvik-cache/*
				fi
			fi

			if $BB [ ! -d /data/dalvik-cache ]; then
				$BB mkdir /data/dalvik-cache
				$BB chown 1000.1000 /data/dalvik-cache
				$BB chmod 771 /data/dalvik-cache
			fi

			doLog v "Creating link between /cache/dalvik-cache and /data/dalvik-cache..."
			$BB mount --bind /data/dalvik-cache /cache/dalvik-cache

			if $BB [ ! -z "`$BB cat /proc/mounts | $BB grep " /cache/dalvik-cache "`" ]; then
				doProp set mounts2sd.cmdalvik.status "loaded"

			else
				doLog e "Error while linking /cache/dalvik-cache to /data/dalvik-cache!"
			fi
		fi

		doLog v "Mounts2SD has been loaded!"

		$BB echo "" >> /system/etc/m2sd.log
		$BB echo "Registered properties:" >> /system/etc/m2sd.log
		$BB echo "----------------------" >> /system/etc/m2sd.log
		doProp get | $BB grep mounts2sd >> /system/etc/m2sd.log
		$BB echo "" >> /system/etc/m2sd.log
		$BB echo "Mount Points:" >> /system/etc/m2sd.log
		$BB echo "-------------" >> /system/etc/m2sd.log
		$BB df -h | $BB grep $MMC_DEVICE >> /system/etc/m2sd.log
		$BB echo "" >> /system/etc/m2sd.log

		doProp set mounts2sd.status "$M2SD_STATUS"

		if $BB [ -e /sys/class/leds/green/brightness ]; then
			$BB echo 0 > /sys/class/leds/green/brightness

		elif $BB [ -e /sys/class/leds/button-backlight/brightness ]; then
			$BB echo 0 > /sys/class/leds/button-backlight/brightness
		fi

		# Remount partitions with read permissions
		$BB mount -o remount,ro /
		$BB mount -o remount,ro /system

		# Kill all active processes 
		$BB [ ! -z "$LOGCAT_PID" ] && $BB kill $LOGCAT_PID 2> /dev/null
	fi
done
# End loopwrapper
